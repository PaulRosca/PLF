(defun squash (l &optional (lf '()))
    (if(null l)
        lf
        (if (listp (car l))
            (append (squash (car l) lf) (squash (cdr l)))
            (cons (car l) (squash (cdr l) lf))
        )
    )
)

(defun suma-patrate (l)
    (setq s 0)
    (dolist (x l)
        (if (numberp x)
            (setq s (+ s (* x x)))
        )
    )
    (return-from suma-patrate s)
)
;;;Tema Curs
(defun suma-numere (l)
    (setq s 0)
    (dolist (x l)
        (if (numberp x)
            (setq s (+ s x))
        )
    )
    (return-from suma-numere s)
)
(defun elem-poz-impare (l)
    (setq lf '())
    (do((el (car l) (car l)))
        ((not el)
            lf
        )
        (setq lf (cons el lf))
        (setq l (cddr l))
    )
    (return-from elem-poz-impare (reverse lf))
)
(defun sterge-elem (l e)
    (setq lf '())
    (dolist (x l)
        (if (not (equalp e x))
            (setq lf (cons x lf))
        )
    )
    (return-from sterge-elem (reverse lf))
)