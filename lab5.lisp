(defun lungime-v1 (l)
    (setq s 0)
    (dolist (x l)
        (setq s (+ s 1))
    )
    (return-from lungime s)
)
(defun lungime-v2 (l)
    (setq s 0)
    (do ((aux l (cdr aux)))
        ((not aux)
            (return-from lungime-v2 s)
        )
        (setq s (+ s 1))
    )
)
(defun inversa-v1 (l)
   (setq il '())
   (dolist (x l)
    (setq il (cons x il))
   )
   (return-from inversa-v1 il)

)
(defun inversa-v2 (l)
    (setq il '())
    (do((el (car l) (car l)))
        ((not el)
            (return-from inversa-v2 il)
        )
        (setq il (cons el il))
        (setq l (cdr l))
    )
)
(defun factorial-v1 (n)
    (do ((i 1 (+ 1 i))
         (f 1 (* i f))
        )
        ((> i n)
         (return-from factorial-v1 f)
        )
    )
)
(defun factorial-v2 (n)
    (setq f 1)
    (loop for i from 1 to n
        do(setq f (* f i))
    )
    (return-from factorial-v2 f)
)
(defun cmmdc-v1 (a b)
    (do ((aux b b))
        ((= b 0)
            a
        )
        (setq b (mod a b))
        (setq a aux)
    )
)
(defun cmmdc-v2 (a b)
    (tagbody while
        (if (= b 0)
            (return-from cmmdc-v2 a)
        )
        (setq aux b)
        (setq b (mod a b))
        (setq a aux)
        (go while)
    )
)

(defun range (l)
    (setq l (delete-if-not 'numberp l))
    (if (not l)
        (return-from range '(nil nil))
        (return-from range (list (apply 'min l) (apply 'max l)))
    )
)